import logging
import random
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# === 🔐 المفاتيح (يتم جلبها من البيئة - مثل Replit أو Render) ===
import os

BOT_TOKEN = os.getenv("BOT_TOKEN")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")

# === 📢 التحقق من المفاتيح ===
if not BOT_TOKEN:
    print("❌ خطأ: لم يتم تعيين BOT_TOKEN")
    exit()
if not TMDB_API_KEY:
    print("❌ تحذير: لم يتم تعيين TMDB_API_KEY")
    exit()

print("✅ البوت جاهز للتشغيل...")
print("📡 يستخدم توكن التليجرام: ", BOT_TOKEN[:10] + "...")
print("🎬 يستخدم مفتاح TMDb: ", TMDB_API_KEY[:10] + "...")

# === 🌍 النصوص متعددة اللغات ===
TEXTS = {
    'start': {
        'ar': "مرحبًا! أنا *What To Watch* 🎥\nاختر لغتك:",
        'en': "Hi! I'm *What To Watch* 🎥\nChoose your language:"
    },
    'lang_selected': {
        'ar': "✅ تم اختيار اللغة العربية",
        'en': "✅ English selected"
    },
    'choose': {
        'ar': "اختر ما تريد:",
        'en': "Choose what you want:"
    },
    'origin': {
        'ar': "اختر *أصل الفيلم*:",
        'en': "Choose *Movie Origin*:"
    },
    'language': {
        'ar': "اختر *لغة الفيلم*:",
        'en': "Choose *Movie Language*:"
    },
    'rating_step': {
        'ar': "اختر *التقييم الأدنى* للفيلم (من 1 إلى 10):",
        'en': "Choose *minimum rating* for the movie (from 1 to 10):"
    },
    'genre': {
        'ar': "اختر *نوع الفيلم*:",
        'en': "Choose *Genre*:"
    },
    'movie_info': {
        'ar': (
            "🎬 *{title}*\n"
            "🌍 الأصل: {origin}\n"
            "🗣 اللغة: {lang}\n"
            "🎭 النوع: {genre}\n"
            "📅 السنة: {year}\n"
            "⭐ التقييم: {rating}/10\n"
            "📝 {overview}\n"
            "🔗 [IMDb](https://www.imdb.com/title/{imdb_id}/)"
        ),
        'en': (
            "🎬 *{title}*\n"
            "🌍 Origin: {origin}\n"
            "🗣 Language: {lang}\n"
            "🎭 Genre: {genre}\n"
            "📅 Year: {year}\n"
            "⭐ Rating: {rating}/10\n"
            "📝 {overview}\n"
            "🔗 [IMDb](https://www.imdb.com/title/{imdb_id}/)"
        )
    },
    'start_filter': {
        'ar': "🎬 ابدأ الاختيار",
        'en': "🎬 Start Choosing"
    },
    'random': {
        'ar': "🎲 فيلم عشوائي",
        'en': "🎲 Random Movie"
    }
}

# === 🎞️ التصنيفات ===
ORIGINS = {
    'ar': ["هوليوود", "بوليوود", "عربي", "آسيوي", "فرنسي", "إسباني"],
    'en': ["Hollywood", "Bollywood", "Arabic", "Asian", "French", "Spanish"]
}

LANGUAGES = {
    'ar': ["عربي", "إنجليزي", "هندي", "كوري", "ياباني", "فرنسي"],
    'en': ["Arabic", "English", "Hindi", "Korean", "Japanese", "French"]
}

# خريطة لغات TMDb
LANGUAGE_CODES = {
    'عربي': 'ar', 'إنجليزي': 'en', 'هندي': 'hi', 'كوري': 'ko', 'ياباني': 'ja', 'فرنسي': 'fr',
    'Arabic': 'ar', 'English': 'en', 'Hindi': 'hi', 'Korean': 'ko', 'Japanese': 'ja', 'French': 'fr'
}

GENRES = {
    'ar': ["أكشن", "دراما", "كوميديا", "رعب", "رومانسي", "خيال علمي", "جريمة", "أنميشن"],
    'en': ["Action", "Drama", "Comedy", "Horror", "Romance", "Sci-Fi", "Crime", "Animation"]
}

# خريطة الأنواع
GENRE_IDS = {
    'أكشن': 28, 'دراما': 18, 'كوميديا': 35, 'رعب': 27, 'رومانسي': 10749,
    'خيال علمي': 878, 'جريمة': 80, 'أنميشن': 16,
    'Action': 28, 'Drama': 18, 'Comedy': 35, 'Horror': 27, 'Romance': 10749,
    'Sci-Fi': 878, 'Crime': 80, 'Animation': 16
}

# === 🌐 دالة جلب فيلم من TMDb مع تصفية دقيقة للغة والأصل ===
def get_movie_from_tmdb(origin=None, language=None, genre=None, min_rating=0, user_lang='en'):
    url = "https://api.themoviedb.org/3/discover/movie"
    params = {
        'api_key': TMDB_API_KEY,
        'sort_by': 'popularity.desc',
        'vote_count.gte': 100,
        'page': random.randint(1, 5)
    }

    # ✅ تصفية حسب لغة الفيلم
    if language in LANGUAGE_CODES:
        params['with_original_language'] = LANGUAGE_CODES[language]

    # ✅ تصفية حسب النوع
    if genre in GENRE_IDS:
        params['with_genres'] = GENRE_IDS[genre]

    # ✅ تصفية حسب التقييم الأدنى
    if min_rating > 0:
        params['vote_average.gte'] = min_rating

    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('results'):
                candidates = []

                for movie_data in data['results']:
                    # ✅ التصفية اليدوية: إذا اختار "عربي"، تأكد أن اللغة الأصلية هي 'ar'
                    if origin == "عربي" or language == "عربي":
                        if movie_data.get('original_language') != 'ar':
                            continue  # تخطي الأفلام غير العربية

                    # ✅ تصفية هندية: إذا اختار "هندي"، تأكد أن اللغة 'hi'
                    if language == "هندي" and movie_data.get('original_language') != 'hi':
                        continue

                    # ✅ تصفية إنجليزية: إذا اختار "إنجليزي"، تأكد أن اللغة 'en'
                    if language == "إنجليزي" and movie_data.get('original_language') != 'en':
                        continue

                    candidates.append(movie_data)

                if candidates:
                    movie_data = random.choice(candidates)

                    # ✅ جلب التفاصيل بلغة المستخدم
                    lang_code = 'ar' if user_lang == 'ar' else 'en'
                    details_url = f"https://api.themoviedb.org/3/movie/{movie_data['id']}"
                    details_params = {
                        'api_key': TMDB_API_KEY,
                        'language': lang_code
                    }
                    details = requests.get(details_url, params=details_params).json()

                    # ✅ اسم الفيلم بالإنجليزية دائمًا
                    title = movie_data.get('original_title') or movie_data.get('title', 'Unknown Title')
                    overview = details.get('overview') or "لا يوجد وصف متاح."

                    return {
                        'title': title,
                        'year': movie_data['release_date'][:4] if movie_data.get('release_date') else "غير معروف",
                        'rating': round(movie_data['vote_average'], 1),
                        'overview': overview,
                        'imdb_id': details.get('imdb_id', 'tt0000000'),
                        'origin': origin or "غير معروف",
                        'lang': language or "غير معروف",
                        'genre': genre or "غير معروف"
                    }
    except Exception as e:
        print(f"⚠️ خطأ في الاتصال بـ TMDb: {e}")

    # أفلام احتياطية (نادرة الاستخدام)
    fallback = [
        {"title": "Inception", "genre": "خيال علمي", "origin": "هوليوود", "language": "إنجليزي", "year": 2010, "rating": 8.8, "imdb_id": "tt1375666", "overview": "A dream within a dream"},
        {"title": "The Blue Elephant", "genre": "رعب", "origin": "عربي", "language": "عربي", "year": 2014, "rating": 7.8, "imdb_id": "tt4599282", "overview": "فيلم رعب مصري نفسي"}
    ]
    movie = random.choice(fallback)
    return {
        'title': movie['title'],
        'year': movie['year'],
        'rating': movie['rating'],
        'overview': movie['overview'],
        'imdb_id': movie['imdb_id'],
        'origin': movie['origin'],
        'lang': movie['language'],
        'genre': movie['genre']
    }

# === 🤖 أوامر البوت ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("العربية 🇾🇪", callback_data='lang_ar')],
        [InlineKeyboardButton("English 🇬🇧", callback_data='lang_en')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        TEXTS['start']['ar'],
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    lang = context.user_data.get('lang', 'ar')

    if data == 'lang_ar':
        context.user_data['lang'] = 'ar'
        await query.edit_message_text(TEXTS['lang_selected']['ar'])
        await show_main_menu(query, 'ar')
    elif data == 'lang_en':
        context.user_data['lang'] = 'en'
        await query.edit_message_text(TEXTS['lang_selected']['en'])
        await show_main_menu(query, 'en')

    elif data == 'start_filter':
        keyboard = [[InlineKeyboardButton(o, callback_data=f'origin_{o}')] for o in ORIGINS[lang]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS['origin'][lang], reply_markup=reply_markup, parse_mode='Markdown')

    elif data.startswith('origin_'):
        origin = data.split('_', 1)[1]
        context.user_data['origin'] = origin
        keyboard = [[InlineKeyboardButton(l, callback_data=f'lang_{l}')] for l in LANGUAGES[lang]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(TEXTS['language'][lang], reply_markup=reply_markup, parse_mode='Markdown')

    elif data.startswith('lang_') and not data.startswith('lang_a'):
        language = data.split('_', 1)[1]
        context.user_data['movie_lang'] = language
        await ask_for_min_rating(query, lang)

    elif data.startswith('genre_'):
        genre = data.split('_', 1)[1]
        context.user_data['genre'] = genre
        await suggest_movie_with_filters(query, lang, context)

    elif data == 'random':
        movie = get_movie_from_tmdb(user_lang=lang)
        context.user_data['last_movie'] = movie
        await send_movie(query, movie, lang)

# === ⭐ خطوة: اختيار التقييم الأدنى ===
async def ask_for_min_rating(query, lang):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(str(i), callback_data=f'minrate_{i}') for i in range(1, 6)],
        [InlineKeyboardButton(str(i), callback_data=f'minrate_{i}') for i in range(6, 11)]
    ])
    await query.edit_message_text(TEXTS['rating_step'][lang], reply_markup=keyboard, parse_mode='Markdown')

# === 🎯 حفظ التقييم واختيار النوع ===
async def handle_min_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    rating = int(query.data.split('_')[1])
    context.user_data['min_rating'] = rating
    lang = context.user_data.get('lang', 'ar')

    keyboard = [[InlineKeyboardButton(g, callback_data=f'genre_{g}')] for g in GENRES[lang]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(TEXTS['genre'][lang], reply_markup=reply_markup, parse_mode='Markdown')

# === 🎬 اقتراح فيلم بناءً على التصفية (مع التصحيح) ===
async def suggest_movie_with_filters(query, lang, context):
    origin = context.user_data.get('origin')
    language = context.user_data.get('movie_lang')
    genre = context.user_data.get('genre')
    min_rating = context.user_data.get('min_rating', 0)

    movie = get_movie_from_tmdb(
        origin=origin,
        language=language,
        genre=genre,
        min_rating=min_rating,
        user_lang=lang
    )

    if not movie:
        await query.edit_message_text("❌ لم أجد فيلمًا يناسب معاييرك.")
        return

    context.user_data['last_movie'] = movie
    await send_movie(query, movie, lang)

async def show_main_menu(query, lang):
    keyboard = [
        [InlineKeyboardButton(TEXTS['start_filter'][lang], callback_data='start_filter')],
        [InlineKeyboardButton(TEXTS['random'][lang], callback_data='random')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(TEXTS['choose'][lang], reply_markup=reply_markup, parse_mode='Markdown')

# === 📝 عرض الفيلم المقترح (بدون أزرار) ===
async def send_movie(query, movie, lang):
    text = TEXTS['movie_info'][lang].format(
        title=movie['title'],  # ✅ بالإنجليزية دائمًا
        origin=movie['origin'],
        lang=movie['lang'],
        genre=movie['genre'],
        year=movie['year'],
        rating=movie['rating'],
        overview=movie['overview'],
        imdb_id=movie['imdb_id']
    )
    await query.edit_message_text(text=text, parse_mode='Markdown', disable_web_page_preview=True)

# === معالجة الرسائل النصية ===
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    lang = context.user_data.get('lang', 'ar')
    if any(word in text for word in ['فيلم', 'watch', 'movie']):
        movie = get_movie_from_tmdb(user_lang=lang)
        await update.message.reply_text(f"🎬 {movie['title']} (⭐ {movie['rating']})", parse_mode='Markdown')

# === 🚀 الدالة الرئيسية ===
def main():
    if not BOT_TOKEN:
        print("❌ BOT_TOKEN مطلوب")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # ✅ الترتيب الصحيح للمعالجات
    application.add_handler(CallbackQueryHandler(handle_min_rating, pattern='^minrate_'))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    print("✅ البوت يعمل: What To Watch (مُحدّث) - تصفية دقيقة")
    application.run_polling()

if __name__ == '__main__':
    main()
